/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package com.migestion.swing.custom;

import java.io.Serializable;

import javax.swing.ImageIcon;
import javax.swing.JTextField;

import com.migestion.swing.navigation.LinkFindObject;
import com.migestion.swing.navigation.interfaces.ILinkWindowFindObject;
import com.migestion.swing.navigation.listeners.LinkFindObjectListener;
import com.migestion.swing.utils.StringUtils;

/**
 *
 * @author bernardo
 */
public class JFindObjectPanel2  extends javax.swing.JPanel  implements Serializable, LinkFindObjectListener{

    Object objectFound;

    //link para buscar el objeta.

    protected LinkFindObject link ;
    protected ILinkWindowFindObject windowFindObject;
	protected IObjectFoundInspector inspector;
	protected LinkFindObjectListener listener;
	protected IFinderObjectByCode finderByCode;
	    
        
    /**
     * Creates new form JFindObjectPanel2
     */
    public JFindObjectPanel2() {
        initComponents();
    }
    
    public JFindObjectPanel2(ILinkWindowFindObject windowFindObject, LinkFindObjectListener listener){

    	this();
    	
    	this.windowFindObject = windowFindObject;
		this.listener = listener;
		
		txtObjectFound.setEditable(false);
		
		txtCodeObjectFound.setEditable(true);
		txtCodeObjectFound.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtCodeObjectFoundFocusLost(evt);
            }
        });		
		
		//link para buscar el objeto.
		link = new LinkFindObject(this.windowFindObject, "");		
		link.addListener(this.listener);
		//el panel tambi�n ser� un listener para poder mostrar la descripci�n
		//del objeto seleccionado.
		link.addListener(this);
		
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtCodeObjectFound = new javax.swing.JTextField();
        txtObjectFound = new javax.swing.JTextField();
        btnFind = new javax.swing.JButton();

        btnFind.setText("Buscar");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(txtCodeObjectFound, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtObjectFound, javax.swing.GroupLayout.DEFAULT_SIZE, 307, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnFind, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(txtCodeObjectFound, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(txtObjectFound, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(btnFind))
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnFind;
    private javax.swing.JTextField txtCodeObjectFound;
    private javax.swing.JTextField txtObjectFound;
    // End of variables declaration//GEN-END:variables


	public void objectFound(Object objectFound) {
		this.objectFound = objectFound;
		if(objectFound!=null){
			
			String code="";
			String description = objectFound.toString();
			if(this.inspector!=null){
				code = inspector.getCode(objectFound);
				description = inspector.getDescription(objectFound);
			}
			
			txtObjectFound.setText( description);
			txtCodeObjectFound.setText(code);
		}
		else{
			txtObjectFound.setText("");
			txtCodeObjectFound.setText("");
		}
	}

	public void setListener(LinkFindObjectListener listener) {
		this.listener = listener;
		link.addListener(this.listener);
	}
	
	public void setWindowFindObject(ILinkWindowFindObject dialog) {
		this.windowFindObject = windowFindObject;
		link.setDialog(dialog);
	}
	public IObjectFoundInspector getInspector() {
		return inspector;
	}
	public void setInspector(IObjectFoundInspector inspector) {
		this.inspector = inspector;
	}
	
	public IFinderObjectByCode getFinderByCode() {
		return finderByCode;
	}
	public void setFinderByCode(IFinderObjectByCode finderByCode) {
		this.finderByCode = finderByCode;
	}
	/**
	 * cuando sale del txt para ingresar el c�digo, buscamos el
	 * objeto con el controlador indicado.
	 * @param evt
	 */
    private void txtCodeObjectFoundFocusLost(java.awt.event.FocusEvent evt) {
    	
    	String code = txtCodeObjectFound.getText();
    	if(!StringUtils.isEmpty(code) && getFinderByCode()!=null){
	        Object objectFinded = getFinderByCode().getObject(code);
	        //mostramos el objecto en el panel.
	        objectFound(objectFinded);
	        //le avisamos el listener.
	        if(listener!=null)
	        	listener.objectFound(objectFinded);
        }else{
	        //le avisamos el listener.
	        if(listener!=null)
	        	listener.objectFound(null);
        	objectFound(null);
        }
    }

    /**
     * path de la imagen para el bot�n de b�squeda.
     * @param path
     */
    public void setImagePath(String path){
    	if(!StringUtils.isEmpty(path)){
    		link.putValue(link.LARGE_ICON_KEY, new ImageIcon(path));
        	btnFind.setIcon(new ImageIcon(path));    		
    	}
    }

    /**
     * se setea editable o no el componente.
     * @param editable
     */
    public void setEditable(boolean editable){
        btnFind.setEnabled(editable);
        txtCodeObjectFound.setEditable(editable);
        txtObjectFound.setEditable(false);
    }
	public Object getObjectFound() {
		return objectFound;
	}
	public void setObjectFound(Object objectFound) {
		this.objectFound = objectFound;
	}
	public JTextField getTxtCodeObjectFound() {
		return txtCodeObjectFound;
	}
	public JTextField getTxtObjectFound() {
		return txtObjectFound;
	}
    
    public void clear(){
    	txtCodeObjectFound.setText("");
    	txtObjectFound.setText("");
    	objectFound = null;
    }
    
//    public void hideCode(){
//    	
//    	input.remove( txtCodeObjectFound );
//
//		//calculamos un porcentaje para texto y code.
//		int codewidth = txtCodeObjectFound.getWidth();
//		int textwidth = txtObjectFound.getWidth();
//		setTextWidth(textwidth + codewidth);
//    }
}
